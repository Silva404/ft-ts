"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDecodeException = exports.encodeHex = exports.encodeBase64Url = exports.encodeBase64 = exports.decodeHexString = exports.decodeHex = exports.decodeBase64UrlString = exports.decodeBase64Url = exports.decodeBase64String = exports.decodeBase64 = exports.DecodeExceptionTypeId = exports.DecodeException = void 0;
var Either = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Either"));
var Base64 = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/internal/Encoding/Base64"));
var Base64Url = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/internal/Encoding/Base64Url"));
var Common = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/internal/Encoding/Common"));
var Hex = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/internal/Encoding/Hex"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * This module provides encoding & decoding functionality for:
 *
 * - base64 (RFC4648)
 * - base64 (URL)
 * - hex
 *
 * @since 1.0.0
 */

/**
 * Encodes the given value into a base64 (RFC4648) `string`.
 *
 * @category encoding
 * @since 1.0.0
 */
const encodeBase64 = input => typeof input === "string" ? Base64.encode(Common.encoder.encode(input)) : Base64.encode(input);
/**
 * Decodes a base64 (RFC4648) encoded `string` into a `Uint8Array`.
 *
 * @category decoding
 * @since 1.0.0
 */
exports.encodeBase64 = encodeBase64;
const decodeBase64 = str => Base64.decode(str);
/**
 * Decodes a base64 (RFC4648) encoded `string` into a UTF-8 `string`.
 *
 * @category decoding
 * @since 1.0.0
 */
exports.decodeBase64 = decodeBase64;
const decodeBase64String = str => Either.map(decodeBase64(str), _ => Common.decoder.decode(_));
/**
 * Encodes the given value into a base64 (URL) `string`.
 *
 * @category encoding
 * @since 1.0.0
 */
exports.decodeBase64String = decodeBase64String;
const encodeBase64Url = input => typeof input === "string" ? Base64Url.encode(Common.encoder.encode(input)) : Base64Url.encode(input);
/**
 * Decodes a base64 (URL) encoded `string` into a `Uint8Array`.
 *
 * @category decoding
 * @since 1.0.0
 */
exports.encodeBase64Url = encodeBase64Url;
const decodeBase64Url = str => Base64Url.decode(str);
/**
 * Decodes a base64 (URL) encoded `string` into a UTF-8 `string`.
 *
 * @category decoding
 * @since 1.0.0
 */
exports.decodeBase64Url = decodeBase64Url;
const decodeBase64UrlString = str => Either.map(decodeBase64Url(str), _ => Common.decoder.decode(_));
/**
 * Encodes the given value into a hex `string`.
 *
 * @category encoding
 * @since 1.0.0
 */
exports.decodeBase64UrlString = decodeBase64UrlString;
const encodeHex = input => typeof input === "string" ? Hex.encode(Common.encoder.encode(input)) : Hex.encode(input);
/**
 * Decodes a hex encoded `string` into a `Uint8Array`.
 *
 * @category decoding
 * @since 1.0.0
 */
exports.encodeHex = encodeHex;
const decodeHex = str => Hex.decode(str);
/**
 * Decodes a hex encoded `string` into a UTF-8 `string`.
 *
 * @category decoding
 * @since 1.0.0
 */
exports.decodeHex = decodeHex;
const decodeHexString = str => Either.map(decodeHex(str), _ => Common.decoder.decode(_));
/**
 * @since 1.0.0
 * @category symbols
 */
exports.decodeHexString = decodeHexString;
const DecodeExceptionTypeId = Common.DecodeExceptionTypeId;
/**
 * Creates a checked exception which occurs when decoding fails.
 *
 * @since 1.0.0
 * @category errors
 */
exports.DecodeExceptionTypeId = DecodeExceptionTypeId;
const DecodeException = Common.DecodeException;
/**
 * Returns `true` if the specified value is an `DecodeException`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
exports.DecodeException = DecodeException;
const isDecodeException = Common.isDecodeException;
exports.isDecodeException = isDecodeException;
//# sourceMappingURL=Encoding.js.map