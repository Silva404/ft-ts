/**
 * @since 1.0.0
 */
import * as Equal from "@effect/data/Equal";
import { dual } from "@effect/data/Function";
import * as Hash from "@effect/data/Hash";
import { NodeInspectSymbol, toJSON, toString } from "@effect/data/Inspectable";
import { EffectTypeId, effectVariance } from "@effect/data/internal/Effect";
import * as option from "@effect/data/internal/Option";
import { pipeArguments } from "@effect/data/Pipeable";
/**
 * @internal
 */
export const TypeId = /*#__PURE__*/Symbol.for("@effect/data/Either");
const CommonProto = {
  [EffectTypeId]: effectVariance,
  [TypeId]: {
    _A: _ => _
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  },
  toString() {
    return toString(this.toJSON());
  }
};
const RightProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {
  _tag: "Right",
  [Equal.symbol](that) {
    return isEither(that) && isRight(that) && Equal.equals(that.right, this.right);
  },
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.right));
  },
  toJSON() {
    return {
      _id: "Either",
      _tag: this._tag,
      right: toJSON(this.right)
    };
  }
});
const LeftProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {
  _tag: "Left",
  [Equal.symbol](that) {
    return isEither(that) && isLeft(that) && Equal.equals(that.left, this.left);
  },
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.left));
  },
  toJSON() {
    return {
      _id: "Either",
      _tag: this._tag,
      left: toJSON(this.left)
    };
  }
});
/** @internal */
export const isEither = input => typeof input === "object" && input != null && TypeId in input;
/** @internal */
export const isLeft = ma => ma._tag === "Left";
/** @internal */
export const isRight = ma => ma._tag === "Right";
/** @internal */
export const left = left => {
  const a = Object.create(LeftProto);
  a.left = left;
  return a;
};
/** @internal */
export const right = right => {
  const a = Object.create(RightProto);
  a.right = right;
  return a;
};
/** @internal */
export const getLeft = self => isRight(self) ? option.none : option.some(self.left);
/** @internal */
export const getRight = self => isLeft(self) ? option.none : option.some(self.right);
/** @internal */
export const fromOption = /*#__PURE__*/dual(2, (self, onNone) => option.isNone(self) ? left(onNone()) : right(self.value));
//# sourceMappingURL=Either.mjs.map