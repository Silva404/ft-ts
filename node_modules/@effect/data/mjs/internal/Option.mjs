/**
 * @since 1.0.0
 */
import * as Equal from "@effect/data/Equal";
import * as Hash from "@effect/data/Hash";
import { NodeInspectSymbol, toJSON, toString } from "@effect/data/Inspectable";
import { EffectTypeId, effectVariance } from "@effect/data/internal/Effect";
import { pipeArguments } from "@effect/data/Pipeable";
const TypeId = /*#__PURE__*/Symbol.for("@effect/data/Option");
const CommonProto = {
  [EffectTypeId]: effectVariance,
  [TypeId]: {
    _A: _ => _
  },
  [NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return pipeArguments(this, arguments);
  },
  toString() {
    return toString(this.toJSON());
  }
};
const SomeProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {
  _tag: "Some",
  [Equal.symbol](that) {
    return isOption(that) && isSome(that) && Equal.equals(that.value, this.value);
  },
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.value));
  },
  toJSON() {
    return {
      _id: "Option",
      _tag: this._tag,
      value: toJSON(this.value)
    };
  }
});
const NoneProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {
  _tag: "None",
  [Equal.symbol](that) {
    return isOption(that) && isNone(that);
  },
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(this._tag));
  },
  toJSON() {
    return {
      _id: "Option",
      _tag: this._tag
    };
  }
});
/** @internal */
export const isOption = input => typeof input === "object" && input != null && TypeId in input;
/** @internal */
export const isNone = fa => fa._tag === "None";
/** @internal */
export const isSome = fa => fa._tag === "Some";
/** @internal */
export const none = /*#__PURE__*/Object.create(NoneProto);
/** @internal */
export const some = value => {
  const a = Object.create(SomeProto);
  a.value = value;
  return a;
};
//# sourceMappingURL=Option.mjs.map